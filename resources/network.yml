Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: 'DDL - VPC - ${self:provider.stage}'
  SecurityGroup:
    DependsOn: VPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DDL - ${self:provider.stage}
      VpcId:
        Ref: VPC
  SecurityGroupIngressRuleIpv4:
    DependsOn: SecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: 'DDL Security Group Inbound rule - ${self:provider.stage}'
      FromPort: 5432
      ToPort: 5432
      IpProtocol: tcp
      GroupId:
        Ref: SecurityGroup
  SecurityGroupIngressRuleIpv6:
    DependsOn: SecurityGroup
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      CidrIpv6: '::/0'
      Description: 'DDL Group Inbound rule - ${self:provider.stage}'
      FromPort: 5432
      ToPort: 5432
      IpProtocol: tcp
      GroupId:
        Ref: SecurityGroup
  SecurityGroupEgressRuleIpv4:
    DependsOn: SecurityGroup
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      CidrIp: '0.0.0.0/0'
      Description: 'DDL Group Outbound rule - ${self:provider.stage}'
      FromPort: 5432
      ToPort: 5432
      IpProtocol: tcp
      GroupId:
        Ref: SecurityGroup
  SecurityGroupEgressRuleIpv6:
    DependsOn: SecurityGroup
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      CidrIpv6: '::/0'
      Description: 'DDL Group Outbound rule - ${self:provider.stage}'
      FromPort: 5432
      ToPort: 5432
      IpProtocol: tcp
      GroupId:
        Ref: SecurityGroup
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'DdlInternetGateway - ${self:provider.stage}'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  #Subnets
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: ${self:provider.region}c
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: DDL - ${self:provider.stage} Subnet A - public
        - Key: Reach
          Value: public
  SubnetAPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: ${self:provider.region}c
      CidrBlock: '10.0.1.0/24'
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: DDL - ${self:provider.stage} Subnet A - private
        - Key: Reach
          Value: private
  SubnetBPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: ${self:provider.region}b
      CidrBlock: '10.0.2.0/24'
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: DDL - ${self:provider.stage} Subnet B - private
        - Key: Reach
          Value: private
  EIPA:
    DependsOn: VPC
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGatewayA:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: 
        'Fn::GetAtt': [EIPA, AllocationId]
      SubnetId:
        Ref: SubnetAPublic
  # Route Table
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: DDL - ${self:provider.stage} RouteTable A Public
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: SubnetAPublic
      RouteTableId:
        Ref: RouteTablePublic
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: SubnetAPrivate
      RouteTableId:
        Ref: RouteTablePublic
  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId:
        Ref: SubnetBPrivate
      RouteTableId:
        Ref: RouteTablePublic
  #Routes
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  # ACL
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: DDL - ${self:provider.stage} NetworkAcl Public
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId:
        Ref: SubnetAPublic
      NetworkAclId:
        Ref: NetworkAcl
  SubnetNetworkAclAssociationAPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId:
        Ref: SubnetAPrivate
      NetworkAclId:
        Ref: NetworkAcl
  SubnetNetworkAclAssociationBPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId:
        Ref: SubnetBPrivate
      NetworkAclId:
        Ref: NetworkAcl
  NetworkAclEntryInPublicAllowAllIpv4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryInPublicAllowAllIpv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: ::/0
  NetworkAclEntryOutPublicAllowAllIpv4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
  NetworkAclEntryOutPublicAllowAllIpv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: ::/0
  DdlRdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DDL RDS-Aurora Subnet Group"
      SubnetIds:
      - Ref: SubnetAPublic
      - Ref: SubnetAPrivate
      - Ref: SubnetBPrivate
